"use strict";

require("./styles.css");

var handTrack = _interopRequireWildcard(require("handtrackjs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

Navigator.getUserMedia = Navigator.getUserMedia || Navigator.webkitUserMedia || Navigator.mozUserMedia || Navigator.msUserMedia;
const modelParams = {
  flipHorizontal: true,
  // flip e.g for video
  imageScaleFactor: 0.7,
  // reduce input image size for gains in speed.
  maxNumBoxes: 20,
  // maximum number of boxes to detect
  iouThreshold: 0.5,
  // ioU threshold for non-max suppression
  scoreThreshold: 0.79 // confidence threshold for predictions.

};
const video = document.querySelector("#video");
const audio = document.querySelector("#audio");
const canvas1 = document.getElementById("cv1");
const context = canvas.getContext("2d");
let model;
handTrack.startVideo(video).then(status => {
  if (status) {
    navigator.getUserMedia({
      video: {}
    }, stream => {
      video.srcObject = stream;
      setInterval(runDetection, 1000);
    }, err => console.log(err));
  }
});

function runDetection() {
  model.detect(video).then(predictions => {
    context.clearRect(0, 0, canvas.width, canvas.height);

    for (var i = 0; i < predictions.length; i++) {
      var prediction = predictions[i];
      var bbox = prediction.bbox;
      var centerX = bbox[0] + bbox[2] / 2;
      var centerY = bbox[1] + bbox[3] / 2;
      context.fillStyle = "#FF0000";
      context.fillRect(centerX - 2, centerY - 2, 4, 4);
    }
  });
}

handTrack.load(modelParams).then(lmodel => {
  model = lmodel;
});